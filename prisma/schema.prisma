generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  ACTIVE
  INACTIVE
  DELETED
}

enum Role {
  SUPER_ADMIN
  PARTNER
  USER
}

enum VehicleType {
  TWO_WHEELER
  THREE_WHEELER
  FOUR_WHEELER
  SIX_WHEELER
  OTHER
}

model User {
  id          String        @id @default(uuid())
  name        String        @db.VarChar(255)
  profilePic  String?       @db.VarChar(255)
  vehicleType VehicleType?  @default(TWO_WHEELER)
  isVerified  Boolean       @default(false)
  role        Role          @default(USER)
  auth        Auth?
  parkingLots ParkingLot[]
  planId      String?
  plan        Plan[]
  ParkingSlot ParkingSlot[]
  createdAt   DateTime      @default(now()) @db.Timestamp()
  updatedAt   DateTime      @updatedAt @db.Timestamp()
  deletedAt   DateTime?     @db.Timestamp()

  @@index([role])
  @@index([name])
  @@index([deletedAt])
}

model Auth {
  id        String    @id @default(uuid())
  email     String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  phone     String    @unique @db.VarChar(20)
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokens    Token[]
  status    Status    @default(ACTIVE)
  createdAt DateTime  @default(now()) @db.Timestamp()
  updatedAt DateTime  @updatedAt @db.Timestamp()
  deletedAt DateTime? @db.Timestamp()

  @@index([status])
  @@index([deletedAt])
}

model Token {
  id         String    @id @default(uuid())
  token      String    @unique @db.Text
  agent      String    @db.VarChar(255)
  authId     String
  auth       Auth      @relation(fields: [authId], references: [id], onDelete: Cascade)
  issuedAt   DateTime  @default(now()) @db.Timestamp()
  expiresAt  DateTime  @db.Timestamp()
  lastUsedAt DateTime? @db.Timestamp()
  revoked    Boolean   @default(false)
  revokedAt  DateTime? @db.Timestamp()
  revokedBy  String?   @db.VarChar(255)
  deletedAt  DateTime? @db.Timestamp()
  createdAt  DateTime  @default(now()) @db.Timestamp()
  updatedAt  DateTime  @updatedAt @db.Timestamp()

  @@index([authId, token])
  @@index([revokedAt])
  @@index([lastUsedAt])
  @@index([deletedAt])
}

enum PlanStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

model Plan {
  id        String    @id @default(uuid())
  price     Float
  discount  Int       @default(25)
  duration  Int       @default(30) @db.Integer
  status    Status    @default(ACTIVE)
  createdAt DateTime  @default(now()) @db.Timestamp()
  updatedAt DateTime  @updatedAt @db.Timestamp()
  deletedAt DateTime? @db.Timestamp()
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?

  @@index([price])
}

model ParkingSlot {
  id           String      @id @default(uuid())
  slotNumber   String // Added slot number for identification
  isOccupied   Boolean     @default(false)
  type         VehicleType @default(TWO_WHEELER)
  userId       String? // Made optional since not all slots may have users
  user         User?       @relation(fields: [userId], references: [id])
  parkingLot   ParkingLot  @relation(fields: [parkingLotId], references: [id])
  parkingLotId String // Required field to link to parking lot
  expiresAt    DateTime? // Made optional, only relevant for occupied slots
  createdAt    DateTime    @default(now()) @db.Timestamp()
  updatedAt    DateTime    @updatedAt @db.Timestamp()
  deletedAt    DateTime?   @db.Timestamp()

  @@unique([parkingLotId, slotNumber]) // Ensure slot numbers are unique within a parking lot
  @@index([isOccupied])
  @@index([type])
}

model ParkingLot {
  id          String        @id @default(uuid())
  name        String
  address     String
  price       Int           @default(30)
  rating      String[]      @default([])
  distance    String?
  available   Int
  openHours   String        @default("24/7")
  description String
  image       String?
  status      Status        @default(INACTIVE)
  features    String[]      @default([])
  gallery     String[]      @default([])
  owner       User?         @relation(fields: [userId], references: [id])
  userId      String?
  slots       ParkingSlot[] // One-to-many relationship with slots
  deletedAt   DateTime?     @db.Timestamp()
  createdAt   DateTime      @default(now()) @db.Timestamp()
  updatedAt   DateTime      @updatedAt @db.Timestamp()

  @@index([status])
  @@index([deletedAt])
  @@index([name])
  @@index([price])
}
